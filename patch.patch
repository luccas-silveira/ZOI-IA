diff --git a/tag_tracker.py b/tag_tracker.py
index 4bd8d8d6ca4e1c238accc857b28aacaf82e0431a..b1fe69f1871fc53a31bf1f43619bf7ab36668df3 100644
--- a/tag_tracker.py
+++ b/tag_tracker.py
@@ -212,85 +212,91 @@ async def handle_contact_tag(request: web.Request):
 
     return web.json_response({"ok": True, "present": has_tag_now})
 
 async def handle_inbound_message(request: web.Request):
     raw = await request.read()
 
     sig = request.headers.get("x-wh-signature") or request.headers.get("X-Wh-Signature")
     if sig and not verify_signature(raw, sig):
         return web.json_response({"error": "invalid signature"}, status=401)
 
     try:
         event = json.loads(raw.decode("utf-8"))
     except Exception:
         return web.json_response({"error": "invalid json"}, status=400)
 
     wh_id = event.get("webhookId")
     if wh_id:
         if wh_id in PROCESSED_MESSAGES:
             return web.json_response({"ok": True, "dedup": True})
         PROCESSED_MESSAGES.add(wh_id)
 
     contact_id = event.get("contactId")
     if not contact_id:
         return web.json_response({"error": "missing contact id"}, status=422)
     body = event.get("body")
+    conversation_id = event.get("conversationId")
 
     store = load_contact_messages(contact_id)
+    if conversation_id is not None:
+        store["conversationId"] = conversation_id
     msgs = store.get("messages") or []
-    msgs.append({"direction": "inbound", "body": body})
+    msgs.append({"direction": "inbound", "body": body, "conversationId": conversation_id})
     store["messages"] = msgs
     save_contact_messages(contact_id, store)
 
     return web.json_response({"ok": True})
 
 async def handle_outbound_message(request: web.Request):
     raw = await request.read()
 
     sig = request.headers.get("x-wh-signature") or request.headers.get("X-Wh-Signature")
     if sig and not verify_signature(raw, sig):
         return web.json_response({"error": "invalid signature"}, status=401)
 
     try:
         event = json.loads(raw.decode("utf-8"))
     except Exception:
         return web.json_response({"error": "invalid json"}, status=400)
 
     wh_id = event.get("webhookId")
     if wh_id:
         if wh_id in PROCESSED_OUTBOUND_MESSAGES:
             return web.json_response({"ok": True, "dedup": True})
         PROCESSED_OUTBOUND_MESSAGES.add(wh_id)
 
     contact_id = event.get("contactId")
     if not contact_id:
         return web.json_response({"error": "missing contact id"}, status=422)
     body = event.get("body")
+    conversation_id = event.get("conversationId")
 
     store = load_contact_messages(contact_id)
+    if conversation_id is not None:
+        store["conversationId"] = conversation_id
     msgs = store.get("messages") or []
-    msgs.append({"direction": "outbound", "body": body})
+    msgs.append({"direction": "outbound", "body": body, "conversationId": conversation_id})
     store["messages"] = msgs
     save_contact_messages(contact_id, store)
 
     return web.json_response({"ok": True})
 
 def build_app():
     app = web.Application()
     app.add_routes(
         [
             web.get("/healthz", handle_health),
             web.get("/contacts/ativa", handle_list),
             web.post("/webhooks/ghl/contact-tag", handle_contact_tag),
             web.post("/webhooks/ghl/inbound-message", handle_inbound_message),
             web.post("/webhooks/ghl/outbound-message", handle_outbound_message),
         ]
     )
     return app
 
 def main():
     logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
     app = build_app()
     web.run_app(app, port=PORT)
 
 if __name__ == "__main__":
     main()
